{
  "name": "qwest",
  "description": "Ajax library with XHR2, promises and requests limitation",
  "version": "1.7.0",
  "author": {
    "name": "Aur√©lien Delogu",
    "email": "pyrsmk@dreamysource.fr",
    "url": "http://dreamysource.fr"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/pyrsmk/qwest.git"
  },
  "main": "src/qwest.js",
  "keywords": [
    "ajax",
    "request",
    "promises",
    "xhr"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/pyrsmk/qwest/issues",
    "email": "dev@dreamysource.fr"
  },
  "homepage": "http://dreamysource.fr/product/qwest",
  "devDependencies": {
    "glob": "^4.4.1",
    "grunt": "~0.4.4",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "^0.11.2",
    "grunt-contrib-uglify": "~0.4.0",
    "grunt-shell": "^1.1.1",
    "grunt-string-replace": "^1.0.0",
    "jit-grunt": "^0.9.0"
  },
  "readme": "qwest 1.7.0\r\n============\r\n\r\nQwest is a simple ajax library based on `promises` behaviour and that supports `XmlHttpRequest2` special data like `ArrayBuffer`, `Blob` and `FormData`.\r\n\r\nInstall\r\n-------\r\n\r\nYou can pick the minified library or install it with :\r\n\r\n```\r\njam install qwest\r\nbower install qwest\r\nnpm install qwest --save-dev\r\n```\r\n\r\nQuick examples\r\n--------------\r\n\r\n```javascript\r\nqwest.get('example.com')\r\n\t .then(function(response) {\r\n\t\talert(response);\r\n\t });\r\n```\r\n\r\n```javascript\r\nqwest.post('example.com', {\r\n\t\tfirstname: 'Pedro',\r\n\t\tlastname: 'Sanchez',\r\n\t\tage: 30\r\n\t })\r\n\t .then(function(response) {\r\n\t\t// Make some useful actions\r\n\t })\r\n\t .catch(function(e, response) {\r\n\t\t// Process the error\r\n\t });\r\n```\r\n\r\nBasics\r\n------\r\n\r\n```javascript\r\nqwest.`method`(`url`, `data`, `options`)\r\n\t .then(function(response) {\r\n\t\t// Run when the request is successful\r\n\t })\r\n\t .catch(function(e, response) {\r\n\t\t// Process the error\r\n\t })\r\n\t .complete(function(response) {\r\n\t\t// Always run\r\n\t });\r\n```\r\n\r\nThe method is either `get`, `post`, `put` or `delete`. The `data` parameter can be a multi-dimensional array or object, a string, an ArrayBuffer, a Blob, etc... If you don't want to pass any data but specify some options, set data to `null`.\r\n\r\nThe available `options` are :\r\n\r\n- dataType : `post` (by default), `json`, `text`, `arraybuffer`, `blob`, `document` or `formdata` (you don't need to specify XHR2 types since they're automatically detected)\r\n- responseType : the response type; either `auto` (default), `json`, `xml`, `text`, `arraybuffer`, `blob` or `document`\r\n- cache : browser caching; default is `false` for GET requests and `true` for POST requests\r\n- async : `true` (default) or `false`; used to make asynchronous or synchronous requests\r\n- user : the user to access to the URL, if needed\r\n- password : the password to access to the URL, if needed\r\n- headers : javascript object containing headers to be sent\r\n- withCredentials : `false` by default; sends [credentials](http://www.w3.org/TR/XMLHttpRequest2/#user-credentials) with your XHR2 request ([more info in that post](https://dev.opera.com/articles/xhr2/#xhrcredentials))\r\n- timeout : the timeout for the request in ms; `30000` by default\r\n- attempts : the total number of times to attempt the request through timeouts; 1 by default; if you want to remove the limit set it to `null`\r\n\r\nIn each callback, the `this` keyword refers to the `XmlHttpRequest` object, so you can do some specific tasks you may need.\r\n\r\n```javascript\r\nqwest.get('example.com')\r\n\t .then(function(response) {\r\n\t\t// Blah blah blah\r\n\t })\r\n\t .catch(function(e, response) {\r\n\t\tlog(this.responseText);\r\n\t\tthrow e+'('+url+')';\r\n\t });\r\n```\r\n\r\nPlease note, the `catch` promise will be executed for status codes different from `2xx`. If a real big error happens, then the `response` parameter will be `null`.\r\n\r\nBase URI\r\n--------\r\n\r\nYou can define a base URI for your requests. The string will be prepended to the other request URIs.\r\n\r\n```javascript\r\nqwest.base = 'http://example.com/';\r\n```\r\n\r\nRequest limitation\r\n------------------\r\n\r\nOne of the great qwest's functionnalities is the request limitation. It avoids browser freezes and server overloads by freeing bandwidth and memory resources when you have a whole bunch of requests to do at the same time (when you load a gallery, per example). You just need to set the request limit and when the count is reached qwest will stock all further requests and start them when a slot is free.\r\n\r\n```javascript\r\nqwest.limit(4);\r\n\r\n$('.foo').forEach(function() {\r\n\tqwest.get(this.data('some_url_to_get'));\r\n});\r\n```\r\n\r\nIf you want to remove the limit, do `qwest.limit(null)`.\r\n\r\nSet options to XHR\r\n------------------\r\n\r\nIf you want to apply some manual options to the `XHR` object, you can use the `before` promise. It must be called before __any__ other promise. The `this` keyword refers to the `XHR` object itself.\r\n\r\n```javascript\r\nqwest.before(function() {\r\n\t\tthis.uploadonprogress=function(e) {\r\n\t\t\t// Upload in progress\r\n\t\t};\r\n\t })\r\n\t .get('example.com')\r\n\t .then(function(response) {\r\n\t\t// Blah blah blah\r\n\t });\r\n```\r\n\r\nHandling fallbacks\r\n------------------\r\n\r\nXHR2 is not available on every browser, so, if needed, you can simply verify the XHR version.\r\n\r\n```javascript\r\nif(qwest.xhr2) {\r\n\t// Actions for XHR2\r\n}\r\nelse {\r\n\t// Actions for XHR1\r\n}\r\n```\r\n\r\nReceiving binary data in older browsers\r\n---------------------------------------\r\n\r\nGetting binary data in legacy browsers needs a trick, as we can read it on [MDN](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers). In qwest, that's how we could handle it :\r\n\r\n```javascript\r\nqwest.before(function() {\r\n\t\tthis.overrideMimeType('text\\/plain; charset=x-user-defined');\r\n\t })\r\n\t .get('example.com/file')\r\n\t .then(function(response) {\r\n\t \t// response is now a binary string\r\n\t });\r\n```\r\n\r\nCompatibility notes\r\n-------------------\r\n\r\nAccording to this [compatibility table](https://kangax.github.io/compat-table/es5), IE7/8 do not support using `catch` and `delete` as method name because these are reserved words. If you want to support those browsers you should write :\r\n\r\n```javascript\r\nqwest.delete('example.com')\r\n\t .then(function(){})\r\n\t .catch(function(){});\r\n```\r\n\r\nLike this :\r\n\r\n```javascript\r\nqwest['delete']('example.com')\r\n\t .then(function(){})\r\n\t ['catch'](function(){});\r\n```\r\n\r\nXHR2 does not support `arraybuffer`, `blob` and `document` response types in synchroneous mode.\r\n\r\nThe CORS object shipped with IE8 and 9 is `XDomainRequest`. This object __does not__ support `PUT` and `DELETE` requests and XHR2 types. Moreover, the `getResponseHeader()` method is not supported too which is used in the `auto` mode for detecting the reponse type. Then, the response type automatically fallbacks to `json` when in `auto` mode. If you expect another response type, please specify it explicitly. If you want to specify another default response type to fallback in `auto` mode, you can do it like this :\r\n\r\n```js\r\nqwest.setDefaultXdrResponseType('text');\r\n```\r\n\r\nLast notes\r\n----------\r\n\r\n- `auto` mode is only supported for `xml`, `json` and `text` response types; for `arraybuffer`, `blob` and `document` you'll need to define explicitly the `responseType` option\r\n- if the response of your request doesn't return a valid (and recognized) `Content-Type` header, then you __must__ explicitly set the `responseType` option\r\n- if an error occurs in a `then()` callback, it will be caught by the `catch()` promise\r\n- the default `Content-Type` header is `application/x-www-form-urlencoded` for `post` and `xhr2` data types, with a `POST` request\r\n- if you want to set or get raw data, set the related option to `text`\r\n- as stated on [StackOverflow](https://stackoverflow.com/questions/8464262/access-is-denied-error-on-xdomainrequest), XDomainRequest forbid HTTPS requests from HTTP scheme and vice versa\r\n\r\nLicense\r\n-------\r\n\r\n[MIT license](http://dreamysource.mit-license.org) everywhere!\r\n",
  "readmeFilename": "README.md",
  "_id": "qwest@1.7.0",
  "_from": "qwest@~1.7.0"
}
